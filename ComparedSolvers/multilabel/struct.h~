#ifndef STRUCT_H
#define STRUCT_H

#include "util.h"
#include <vector>
#include <map>
#include <set>

using namespace std;

typedef vector<Int> Label;
typedef vector<pair<Int,double> > FracLabel;

class Instance{
	public:
	Int num_vars;
	SparseVect* x_arr;
	Instance(){
		num_vars = 0;
		x_arr = NULL;
	}
};

class Model{
	public:
		Int d;
		double* w;
};

class Param{
	
	public:
	map<string,Int> label_index_map;
	vector<string> label_name_list;
	void (*featuremapFunc)(Param*,Instance*, FracLabel*, SparseVect*);
	void (*oracleFunc)(Param*,Model*,Instance*,Label*,Int, FracLabel*);
	double (*loss)(Param*,Label*,FracLabel*);
	void (*readData)(char*,Param*);
	
	vector<Instance*>* data; //set by readData
	vector<Label*>* labels;
	Int d;
	Int num_states;
	Int n_train; //set after readData
	Int n_test;
	
	double lambda;   //set from cmdline
	char* modelFname;

	Param(){
		d = -1;
		data = new vector<Instance*>();
		labels = new vector<Label*>();
	}
};

class Option{
	
	public:
	Int num_pass;
	bool do_weighted_average;
	
	Option(){
		num_pass = 50;
		do_weighted_average = 1;
	}
};

void labelToFracLabel( Param* param, Label* label, FracLabel* y ){
	
	Int K = param->num_states;
	y->clear();
	for(Label::iterator it=label->begin(); it!=label->end(); it++)
		y->push_back(make_pair(*it,1.0));
	for(Label::iterator it=label->begin(); it!=label->end(); it++)
		for(Label::iterator it2=label->begin(); it2!=label->end(); it2++)
			if( *it2 > *it )
				y->push_back(make_pair( K + (*it)*K + (*it2), 1.0 ));
}

double average_loss( Param* param, Int i_start, Int i_end, vector<Instance*>* data, vector<Label*>* labels, void (*maxOracle)(Param*,Model*,Instance*,Label*,Int, FracLabel*), Model* model){

	double (*loss)(Param*,Label*,FracLabel*) = param->loss;
	Int K = param->num_states;

	FracLabel* ystar = new FracLabel();
	FracLabel* ystar_round = new FracLabel();
	double loss_term = 0.0;
	Int num_pred_vars=0;
	for(Int i=i_start;i<i_end;i++){
		
		maxOracle(param, model, data->at(i), NULL, i, ystar);
		//rounding
		ystar_round->clear();
		for(FracLabel::iterator it=ystar->begin(); it!=ystar->end() && it->first < K; it++){
			if( ((double)rand()/RAND_MAX) < it->second )
				ystar_round->push_back(make_pair(it->first, 1.0));
		}
		
		loss_term += loss(param, labels->at(i), ystar_round);
		num_pred_vars += data->at(i)->num_vars;
	}
	
	delete ystar;
	delete ystar_round;
	
	return loss_term/num_pred_vars;
}

double primal_obj( Param* param, Int i_start, Int i_end, Int n_sample, Model* model){
	
	double (*loss)(Param*,Label*,FracLabel*) = param->loss;
	vector<Instance*>* data = param->data;
	vector<Label*>* labels = param->labels;

	FracLabel* ystar = new FracLabel();
	FracLabel* yi = new FracLabel();
	SparseVect* phi_i = new SparseVect();
	SparseVect* phi_star = new SparseVect();
	SparseVect* psi_i = new SparseVect();
	double loss_term = 0.0;
	Int total = i_end - i_start;
	
	Int m = n_sample;
	if (m > total)
		m = total;
	vector<Int> indices;
	for(Int i = i_start; i < i_end; i++){
		indices.push_back(i);
	}
	random_shuffle(indices.begin(), indices.end());
	for(Int mm = 0; mm < m; mm++){
		
		Int i = indices[mm];
		Instance* ins = data->at(i);
		Label* label = labels->at(i);
		labelToFracLabel( param, label, yi );

		param->oracleFunc(param, model, ins, NULL, i, ystar);
		param->featuremapFunc(param, ins, yi,      phi_i);
		param->featuremapFunc(param, ins, ystar,   phi_star);
		
		double diff = dot(phi_star, model->w) - dot(phi_i, model->w);
		/*if( diff < 0.0 ){
			cerr << "diff=" << diff << endl;
			cerr << "y_star: " << endl;
			prInt(cerr, ystar);
			cerr << "yi:" << endl;
			prInt(cerr, yi);
			cerr << "phi:" << endl;
			prInt(cerr, phi_star);
			prInt(cerr, phi_i);
			cerr << "w:" << endl;
			for(Int j=0;j<model->d;j++)
				cerr << model->w[j] << " ";
			cerr << endl;
			exit(0);
		}*/
		loss_term += dot(phi_star, model->w) - dot(phi_i, model->w) + loss(param, labels->at(i), ystar);
	}
	loss_term *= ((double)total*1.0/m);
	
	double reg_term = 0.0;
	double lambda_bar = param->lambda*param->n_train;
	for(Int i=0; i<model->d; i++){
		double wbar_val = model->w[i] * lambda_bar;
		reg_term += wbar_val*wbar_val;
	}
	reg_term /= (lambda_bar*2.0);
	delete ystar;
	delete yi;
	delete phi_i;
	delete phi_star;
	delete psi_i;
	return reg_term + loss_term;
}

/*void writeModel(char* fname, Model* model){
	
	ofstream fout(fname);
	Int d =  model->numStates * model->numStates;
	fout << "bigram_factor:\t" << d << endl;
	for(Int i=0;i<d;i++)
		fout << model->w_pair[i] << " ";
	fout << endl;
	
	set<Int> used_factor;
	Int nnz=0;
	for(Int i=0;i<model->numStates;i++){
		for(SparseVect::iterator it=model->alpha[i].begin();
				it!=model->alpha[i].end();
				it++){
			
			used_factor.insert(it->first);
			nnz++;
		}
	}
	fout << "unigram_factor(y,factor_index,alpha):\t" << nnz << endl;
	
	for(Int i=0;i<model->numStates;i++){
		for(SparseVect::iterator it=model->alpha[i].begin();
				it!=model->alpha[i].end();
				it++){
			
			fout << i << " " << it->first << " " << it->second << " ";
			fout << endl;
		}
	}
	
	fout << "Support_Vectors(factor_index,vector)\t" << used_factor.size() << endl;
	for(set<Int>::iterator it=used_factor.begin(); it!=used_factor.end(); it++){
		
		SparseVect* sv = model->support_patterns->at(*it);
		fout << *it << " ";
		for(SparseVect::iterator it=sv->begin(); it!=sv->end(); it++)
			fout << it->first << ":" << it->second << " ";
		fout << endl;
	}
	
	fout.close();
}
*/
#endif
